require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

module ApiAuth
  RSpec.describe ClientsController, type: :controller do
    routes { Engine.routes }

    # This should return the minimal set of attributes required to create a valid
    # Client. As you add validations to Client, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) do
      api = create(:api)
      {
        client: {
          name: 'test',
          email: 'test@test.com',
          desc: 'test ha!'
        },
        apis: [
          {
            api_id: api.id,
            GET: true
          },
          {
            api_id: api.id,
            POST: true
          }
        ]
      }
    end

    let(:invalid_attributes) {
      {
        name: 'test'
      }
    }

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # ClientsController. Be sure to keep this updated too.
    let(:valid_session) { {} }

    describe 'GET #index' do
      it 'returns a success response' do
        create(:client)
        get :index, params: {}, session: valid_session
        expect(response).to be_successful
      end
    end

    describe 'GET #show' do
      it 'returns a success response' do
        client = create(:client)
        get :show, params: {id: client.to_param}, session: valid_session
        expect(response).to be_successful
      end
    end

    describe 'GET #new' do
      it 'returns a success response' do
        get :new, params: {}, session: valid_session
        expect(response).to be_successful
      end
    end

    describe 'GET #edit' do
      it 'returns a success response' do
        client = create(:client)
        get :edit, params: {id: client.to_param}, session: valid_session
        expect(response).to be_successful
      end
    end

    describe 'POST #create' do
      context 'with valid params' do
        it 'creates a new Client' do
          expect {
            post :create, params: valid_attributes, session: valid_session
          }.to change(Client, :count).by(1)
          expect(ApiAuth::Client.last.authorized_apis.count).to eq(2)
        end

        it 'redirects to the created client' do
          post :create, params: valid_attributes, session: valid_session
          expect(response).to redirect_to(Client.last)
        end
      end

      context 'with invalid params' do
        it 'returns a success response (i.e. to display the "new" template)' do
          post :create, params: {client: invalid_attributes}, session: valid_session
          expect(response).to be_successful
        end
      end
    end

    describe 'PUT #update' do
      context 'with valid params' do
        let(:new_attributes) {
          {
            name: 'test2',
            email: 'test2@t.com',
            desc: 'test2 ha!'
          }
        }

        it 'updates the requested client' do
          client = create(:client)
          put :update, params: {id: client.to_param, client: new_attributes}, session: valid_session
          client.reload
        end

        it 'redirects to the client' do
          client = create(:client)
          put :update, params: {id: client.to_param, client: new_attributes}, session: valid_session
          expect(response).to redirect_to(client)
        end
      end

      context 'with invalid params' do
        it 'returns a success response (i.e. to display the "edit" template)' do
          client = create(:client)
          put :update, params: { id: client.to_param, client: invalid_attributes}, session: valid_session
          expect(response.successful?).to eq(false)
        end
      end
    end

    describe 'DELETE #destroy' do
      it 'destroys the requested client' do
        client = create(:client)
        expect {
          delete :destroy, params: {id: client.to_param}, session: valid_session
        }.to change(Client, :count).by(-1)
      end

      it 'redirects to the clients list' do
        client = create(:client)
        delete :destroy, params: {id: client.to_param}, session: valid_session
        expect(response).to redirect_to(clients_url)
      end
    end

  end
end
